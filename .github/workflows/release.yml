# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push events on all tags
  push:
    tags:
    - '*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Install zip
      - name: Install zip
        run: sudo apt install zip

      # Compress files to create archive
      - name: Compress files
        run: mkdir artifact && zip -r artifact/woodcutter_$GITHUB_REF_NAME.zip .
      
      # 
      #- uses: actions/upload-artifact@v3
      #  with:
      #    name: woodcutter_$GITHUB_REF_NAME
      #    path: artifact/woodcutter_$GITHUB_REF_NAME
      
      #- uses: "actions/github-script@v6.3.3"
      #- name: "Create release"
      #  with:
      #      github-token: "${{ inputs.github-token }}"
      #      script: |
      #        if (!process.env.RELEASE_TAG) {
      #          core.setFailed("The environment variable RELEASE_TAG is not defined.")
#
#                return;
#              }
#
#              try {
#                const response = await github.rest.repos.createRelease({
#                  draft: false,
#                  generate_release_notes: true,
#                  name: process.env.RELEASE_TAG,
#                  owner: context.repo.owner,
#                  prerelease: false,
#                  repo: context.repo.repo,
#                  tag_name: process.env.RELEASE_TAG,
#                });

#                core.exportVariable('RELEASE_ID', response.data.id);
#                core.exportVariable('RELEASE_UPLOAD_URL', response.data.upload_url);
#              } catch (error) {
#                core.setFailed(error.message);
#              }
